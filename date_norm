#!/bin/bash

# Function to check if a date is valid
is_valid_date() {
    # Try parsing the date using `date` command. If it returns an error, the date is invalid.
    date -d "$1" >/dev/null 2>&1
    return $?
}

# Function to convert date format to YYYY-MM-DD
normalize_date() {
    local input_date="$1"
    
    # First, check if the input date is valid
    if is_valid_date "$input_date"; then
        # Normalize the date to YYYY-MM-DD format
        normalized_date=$(date -d "$input_date" "+%Y-%m-%d")
        echo "$normalized_date"
    else
        # Return the original input if the date is invalid
        echo "$input_date"
    fi
}

# Check if a filename is provided as an argument
if [ $# -eq 1 ]; then
    # Create a backup of the file
    cp "$1" "$1.BAK"
    
    # Process the file line by line
    while IFS= read -r line; do
        # Use sed to perform month name normalization (case insensitive)
        modified_line=$(echo "$line" | sed -E -e '
            s/\b(Jan|January)\b/01/gI;
            s/\b(Feb|February)\b/02/gI;
            s/\b(Mar|March)\b/03/gI;
            s/\b(Apr|April)\b/04/gI;
            s/\b(May)\b/05/gI;
            s/\b(Jun|June)\b/06/gI;
            s/\b(Jul|July)\b/07/gI;
            s/\b(Aug|August)\b/08/gI;
            s/\b(Sep|Sept|September)\b/09/gI;
            s/\b(Oct|October)\b/10/gI;
            s/\b(Nov|November)\b/11/gI;
            s/\b(Dec|December)\b/12/gI;')

        # Normalize various date formats to YYYY-MM-DD (without comments)
        modified_line=$(echo "$modified_line" | sed -E '
            s/\b([0-9]{1,2})[- \t]+([0-9]{1,2})[- \t]+([0-9]{4})\b/\3-\2-\1/g;  # DD-MM-YYYY
            s/\b([0-9]{1,2})[ \t]+([A-Za-z]+)[ \t]+([0-9]{4})\b/\3-\2-\1/g;      # DD Month YYYY
            s/\b([A-Za-z]+)[ \t]+([0-9]{1,2}),?[ \t]+([0-9]{4})\b/\3-\2-\1/g;   # Month DD, YYYY
            s/\b([0-9]{1,2})[-\/]([0-9]{1,2})[-\/]([0-9]{4})\b/\3-\2-\1/g;      # DD/MM/YYYY or DD-MM-YYYY
        ')

        # Check for valid dates and normalize them
        for date_str in $(echo "$modified_line" | grep -oP '\b[0-9]{4}-[0-9]{1,2}-[0-9]{1,2}\b'); do
            # Normalize or leave the date unchanged based on its validity
            normalized=$(normalize_date "$date_str")
            modified_line=$(echo "$modified_line" | sed "s/$date_str/$normalized/g")
        done

        # Output the modified line
        echo "$modified_line"
    done < "$1" > "$1.tmp"

    # Replace the original file with the modified content
    mv "$1.tmp" "$1"
    
    echo "Date normalization complete! Backup saved as $1.BAK"
else
    echo "Usage: $0 <filename>"
fi

